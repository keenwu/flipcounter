<?php 

/**
 * @file
 * Provides flip counter functionality.
 */


/**
 * Implements hook_theme().
 */
function flipcounter_theme() {
  return array(
    'flipcounter' => array(
      'arguments' => array('name' => NULL, 'value' => NULL, 'options' => array()),
    ),
  );
}

/**
 * Adds required CSS/JavaScript files.
 */
function flipcounter_add() {
  static $added;

  // Add CSS/JavaScript files if needed.
  if ( !isset($added) ) {
    // Add files from library.
    drupal_add_css(libraries_get_path('flipcounter') . '/css/counter.css');
    drupal_add_js(libraries_get_path('flipcounter') . '/js/flipcounter.min.js');

    // Add module css and javascript files.
    drupal_add_css(drupal_get_path('module', 'flipcounter') . '/flipcounter.css');
    drupal_add_js(drupal_get_path('module', 'flipcounter') . '/flipcounter.js');

    $added = TRUE;
  }
}

/**
 * Returns a themed flip counter.
 *
 * @param $value
 *   The initial value to display.
 * @param $options
 *   An array of options to set for the javascript plugin
 *   @see http://cnanney.com/journal/code/apple-style-counter-revisited/
 *
 * @return
 *   A theme flip counter.
 */
function theme_flipcounter($name, $value, $options = array()) {
  flipcounter_add();

  // Set default options.
  $options += array(
    'value' => $value,
    'auto' => FALSE,
  );

  $id = 'flipcounter-' . $name;

  drupal_add_js(array('flipcounter' => array($id => $options)), 'setting');

  return "<div id=\"$id\" class=\"flip-counter clear-block clearfix\"></div>";
}
